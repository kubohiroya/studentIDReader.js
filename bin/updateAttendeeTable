#!/usr/bin/env node

/*
  FeliCa Student ID card reader to check attendee
  Copyright (c) 2013 Hiroya Kubo <hiroya@cuc.ac.jp>

  Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/* jslint node: true */
"use strict";

require('../lib/util/arrayUtil.js');
require('../lib/util/dateUtil.js');
require('../lib/util/stringUtil.js');
var stringUtil = require("../lib/util/stringUtil.js");
var AttendeeDB = require('../lib/attendeeDB.js').AttendeeDB;
var ReadStatus = require('../lib/model.js').ReadStatus;
var enrollment = require('../lib/enrollment.js');

var fs = require('fs');
var path = require('path');
var xlsx = require('node-xlsx');
var Iconv = require('iconv').Iconv;
var opt = {encoding:'Shift-JIS'};

var iconv = new Iconv(opt.encoding, 'UTF-8//TRANSLIT//IGNORE');

var enrollmentDir = './enroll';
var attendeeDir = './var';
var outputDir = './attend';

var ATTEND_FILE_PREFIX = 'Attend-';
//var ATTEND_FILE_SUFFIX = '.csv.txt';
var ATTEND_FILE_SUFFIX = '.xlsx';

var ATTEND_EX_FILE_PREFIX = 'Attend-Export-';
var ATTEND_EX_FILE_SUFFIX = '.csv';

var DEBUG = true;

function log(message){
    if(DEBUG){
        console.log(message);
    }
}

process.argv.slice(2).forEach(function (val, index, array) {
    switch (index) {
    case 0:
        enrollmentDir = val;
        break;
    case 1:
        attendeeDir = val;
        break;
    case 2:
        outputDir = val;
        break;
    }
});

log('[config] enrollmentDir: '+enrollmentDir);
log('[config] attendeeDir: '+attendeeDir);
log('[config] outputDir: '+outputDir);

var datetimeTable = {};
var classTable = {};
var attendanceTable = {};
var filenameBaseTable = {};

fs.readdirSync(attendeeDir).forEach(function (attendeeFile) {

    if (attendeeFile.match(/.csv.txt$/) && !attendeeFile.match(/.error.csv.txt$/) && !attendeeFile.indexOf(ATTEND_FILE_PREFIX) == 0) {
        // var attendeeFilename = path.join(attendeeDir, attendeeFile);
        var attendeeFilenameBase = path.basename(attendeeFile, '.csv.txt');

        var readStatusFactory = function (attendFileEntry) {
                var lectureID = attendFileEntry.lectureID;
                var studentID = attendFileEntry.userID;
                var yyyymmddhhmmss = (attendFileEntry.yyyymmdd + " " + attendFileEntry.hhmmss);
                var datetime = yyyymmddhhmmss.split(/[\s\-\:\,]/).createDateAs(['year', 'mon', 'day', 'hour', 'min', 'sec']);

                var readStatus = new ReadStatus(lectureID, studentID, datetime);

                if (!datetimeTable[lectureID]) {
                    datetimeTable[lectureID] = {};
                    classTable[lectureID] = {};
                }
                if (!datetimeTable[lectureID][studentID]) {
                    datetimeTable[lectureID][studentID] = [];
                    classTable[lectureID][studentID] = {};
                }
                datetimeTable[lectureID][studentID].push(datetime);

                if (!attendanceTable[studentID]) {
                   attendanceTable[studentID] = {};
                }
                if (!attendanceTable[studentID][lectureID]) {
                   attendanceTable[studentID][lectureID] = [];
                }
                attendanceTable[studentID][lectureID].push(datetime);
                
                if (!filenameBaseTable[lectureID]) {
                   filenameBaseTable[lectureID] = {};
                }
                if (!filenameBaseTable[lectureID][attendeeFilenameBase]) {
                   filenameBaseTable[lectureID][attendeeFilenameBase] = [];
                }
                filenameBaseTable[lectureID][attendeeFilenameBase].push(studentID);

                return readStatus;
        };

        var attendFileEntryFactory = function (readStatus, student, groupID) {
            return {
                yyyymmdd: readStatus.time.get_yyyymmdd(),
                wdayatime: readStatus.time.get_wdayatime(),
                hhmmss: readStatus.time.get_hhmmss(),
                lectureID: readStatus.lectureID,
                userID: readStatus.userID,
                fullname: student ? student.fullname : undefined,
                furigana: student ? student.furigana : undefined,
                groupID: groupID ? groupID : undefined
            };
        };

        var attendeeDB = new AttendeeDB(attendeeDir, attendeeFilenameBase, readStatusFactory, attendFileEntryFactory);
        
        log('[info] read attendee file: ' + attendeeFilenameBase);
        attendeeDB.values();
    }
});

Object.keys(filenameBaseTable).sort().forEach(function (lectureID) {
    var t = filenameBaseTable[lectureID];
    Object.keys(t).sort().forEach(function (attendeeFilenameBase) {
        log('[info] find lecture: '+ lectureID +" in file: "+attendeeFilenameBase);
    });
});


// 出席日時データをもとに、特定のコマでの出欠・遅刻の区別を出力する

var encoding = 'UTF-8';

Object.keys(datetimeTable).sort().forEach(function (lectureID) {
    var lectureDatetimeMap = {};
    Object.keys(datetimeTable[lectureID]).sort().forEach(function (studentID) {
        datetimeTable[lectureID][studentID].sort().forEach(function (datetime) {
            var yyyymmddwy = datetime.get_yyyy_mm_dd_w_y();
            if (!lectureDatetimeMap[yyyymmddwy]) {
                lectureDatetimeMap[yyyymmddwy] = true;
            }
            if (!classTable[lectureID][studentID][yyyymmddwy]) {
                classTable[lectureID][studentID][yyyymmddwy] = [];
            }
            classTable[lectureID][studentID][yyyymmddwy].push(datetime);
        });
    });

    var enrollmentFile = path.join(enrollmentDir, lectureID + '.txt');

    if (!fs.existsSync(enrollmentFile)) {
        log("[error] cannot find enrollemnt file: " + enrollmentFile);
        return;
    }

    log('[info] read enrollment file: ' + enrollmentFile);

    var enrollmentDB = enrollment.loadEnrollmentFile(enrollmentFile, {
        encoding: 'Shift-JIS',
        separator: ','
    }).enrollmentDB;

    //var studentIDList = Object.keys(datetimeTable[lectureID]).sort();
    var studentIDList = Object.keys(enrollmentDB).sort();


    var file = path.join(outputDir, ATTEND_FILE_PREFIX + lectureID + ATTEND_FILE_SUFFIX);
    var exfile = path.join(outputDir, ATTEND_EX_FILE_PREFIX + lectureID + ATTEND_EX_FILE_SUFFIX);

    var exfd = fs.openSync(exfile, "w");
    //
    // これまでの出席データを
    //


    var content = iconv.convert(fs.readFileSync(filename)).toString();
    if (ATTEND_FILE_SUFFIX.match(/\.txt$/)) {

        var data = '#studentID' + SEPARATOR + 'fullname';
        Object.keys(lectureDatetimeMap).sort().forEach(function (yyyymmddwy) {
            data += SEPARATOR + yyyymmddwy;
        });
        data += '\n';

        studentIDList.forEach(function (studentID) {
            var fullname = enrollmentDB[studentID].fullname;
            var line = studentID + SEPARATOR + fullname;
            Object.keys(lectureDatetimeMap).sort().forEach(function (yyyymmddwy) {
                var cell;
                if (classTable[lectureID][studentID] && classTable[lectureID][studentID][yyyymmddwy]) {
                    cell = '1';
                } else {
                    cell = '0';
                }
                line += SEPARATOR + cell;
            });
            line += '\n';
            data += line;
        });

        log('[info] write attendee table file: ' + file);
        fs.writeFileSync(file, data, encoding);

    } else if (ATTEND_FILE_SUFFIX.match(/\.xlsx$/)) {
        var attendeeTable = [];
        var timeTable = [];
        var timeExceedTable = [];

        var headerRow = ['studentID', 'fullname'];

        Object.keys(lectureDatetimeMap).sort().forEach(function (yyyymmddwy) {
            headerRow.push(yyyymmddwy);
        });
        attendeeTable.push(headerRow);
        timeTable.push(headerRow);
        timeExceedTable.push(headerRow);

        studentIDList.forEach(function (studentID) {
            var fullname = enrollmentDB[studentID].fullname;

            var attendeeTableRow = [studentID, fullname];
            var timeTableRow = [studentID, fullname];
            var timeExceedTableRow = [studentID, fullname];

            Object.keys(lectureDatetimeMap).sort().forEach(function (yyyymmddwy) {
                var attendeeTableCell;
                var timeTableCell;
                var timeExceedTableCell;
                if (classTable[lectureID][studentID] && classTable[lectureID][studentID][yyyymmddwy]) {
                    attendeeTableCell = '1';
                    timeTableCell = classTable[lectureID][studentID][yyyymmddwy].sort().map(function (time) {
                        return time.get_hhmmss();
                    }).join(' ');
                    timeExceedTableCell = classTable[lectureID][studentID][yyyymmddwy].sort().map(function (time) {
                        var delaySec = time.getAcademicClassDelayInSec();
                        var plusminus = '';
                        if (0 <= delaySec) {
                            plusminus = '+';
                        } else {
                            plusminus = '-';
                            delaySec *= -1;
                        }
                        return plusminus + stringUtil.format0d(Math.floor(delaySec / 60)) + ':' + stringUtil.format0d(delaySec % 60);
                    }).join(' ');
                } else {
                    attendeeTableCell = '0';
                    timeTableCell = '';
                    timeExceedTableCell = '';
                }
                attendeeTableRow.push(attendeeTableCell);
                timeTableRow.push(timeTableCell);
                timeExceedTableRow.push(timeExceedTableCell);
            });
            attendeeTable.push(attendeeTableRow);
            timeTable.push(timeTableRow);
            timeExceedTable.push(timeExceedTableRow);
        });

        log('[info] write xlsx file: ' + file);
        fs.writeFileSync(file, xlsx.build({
            worksheets: [
                {
                    'name': 'attendee',
                    'data': attendeeTable
                },
                {
                    'name': 'time',
                    'data': timeTable
                },
                {
                    'name': 'timeExceed',
                    'data': timeExceedTable
                }
                                                       ]
        }), encoding);
    }
});
